#!/bin/bash
# Copyright (c) 2017-2021, Mudita Sp. z.o.o. All rights reserved.
# For licensing, see https://github.com/mudita/MuditaOS/LICENSE.md

usage() {
cat << ==usage
Usage: $(basename "$0") [image_for_sign] [certifcates_dir] [toolpath]
        image_for_sign: Image for signature
        certificates_dir: Directory certificates
        toolpath:         NXP tools path
==usage
exit 1
}

# Validate needed files for sign
# First argument is the certificate root generated by srk_tool
validate_certificates() {
    if [ ! -f "$1/gen_hab_certs/SRK_hash.bin" ]; then
        echo "Error! Unable to find SRK hash"
        exit 1
    fi
    if [ ! -f "$1/crts/CSF1_1_sha256_2048_65537_v3_usr_crt.pem" ]; then
        echo "Error! Unable to find CSF_1_1 cert"
        exit 1
    fi
    if [ ! -f "$1/crts/IMG1_1_sha256_2048_65537_v3_usr_crt.pem" ]; then
        echo "Error! Unable to find CSF_1_1 cert"
        exit 1
    fi
}

# Generate SRK file from the template 
#param in SRK template input
#param SRK output file
gen_srk_from_template() {
    sed "s|startAddress =.*|startAddress=0x80ff0000;|g
         s|\${SRK_INDEX}|0|g
         s|\${SRK_TABLE}|${CERT_DIR}/gen_hab_certs/SRK_hash.bin|g
         s|\${CSF_KEY}|${CERT_DIR}/crts/CSF1_1_sha256_2048_65537_v3_usr_crt.pem|g
         s|\${IMG_KEY}|${CERT_DIR}/crts/IMG1_1_sha256_2048_65537_v3_usr_crt.pem|g
    " "$1" > $2
}


if [ $# -ne 3 ]; then
        echo "Error! Invalid argument count"
        usage
        exit 1
fi

#File to sign
FILE_TO_SIGN="$1"
#Certificate directory
CERT_DIR="$2"
# Tool path
TOOL_PATH="$3"

# Validate certicicate
validate_certificates "$CERT_DIR"

#File search
if [ ! -f "$FILE_TO_SIGN" ]; then 
    echo "Error! Unable to find file to signature"
    exit 1
fi 
#temporary authenticated file HAB
TEMP_HAB_FILE="$(mktemp)"

# Generate SRK template
gen_srk_from_template "cmake/config/imx_authenticated_hab.cmake_template" "$TEMP_HAB_FILE"

# Generate SHA 256 binary signature
openssl dgst -binary -sha256  "$FILE_TO_SIGN" > "$FILE_TO_SIGN.sig"
# Minimum size of binary is 4k
truncate -s 4k "${FILE_TO_SIGN}.sig"
# Convert to srec (acceptable by the tool)
arm-none-eabi-objcopy --change-addresses=0x80ff1000 --input-target=binary --output-target=srec "$FILE_TO_SIGN.sig" "$FILE_TO_SIGN.srec"
rm "$FILE_TO_SIGN.sig"
# Final signing using the tool
./cmake/config/elftosb_wrapper.sh  "$TOOL_PATH" "$TOOL_PATH" -f imx -V -c "$TEMP_HAB_FILE" -o "$FILE_TO_SIGN.sig" "$FILE_TO_SIGN.srec"
# Remove temporary files generated by the NXP tools
rm "$TEMP_HAB_FILE" csf.bin input.csf  "${FILE_TO_SIGN}_nopadding.sig" "${FILE_TO_SIGN}.srec" temp.bin